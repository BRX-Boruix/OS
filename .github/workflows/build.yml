name: Build Boruix OS (x86_64)

# 在push和pull request时触发构建
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# 允许手动触发
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    # 检出代码
    - name: Checkout repository
      uses: actions/checkout@v4
    
    # 安装构建依赖
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          nasm \
          gcc \
          binutils \
          xorriso \
          mtools \
          git \
          curl \
          wget
    
    # 安装Zig工具链
    - name: Install Zig toolchain
      run: |
        echo "Installing Zig toolchain..."
        chmod +x ./zig.sh
        sudo ./zig.sh
        echo "Verifying Zig installation..."
        zig version
        echo "Zig toolchain installed successfully"
    
    # 安装Rust工具链
    - name: Install Rust toolchain
      run: |
        echo "Installing Rust toolchain..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source $HOME/.cargo/env
        rustup target add x86_64-unknown-none
        rustup component add rust-src
        echo "Rust toolchain installed successfully"
    
    # 安装Limine
    - name: Install Limine
      run: |
        echo "Installing Limine bootloader..."
        make install-limine
    
    # 构建x86_64架构
    - name: Build x86_64
      run: |
        echo "Building for architecture: x86_64"
        source $HOME/.cargo/env
        make clean
        make all
    
    # 构建x86_64架构（包含测试命令）
    - name: Build x86_64 with TEST commands
      run: |
        echo "Building for architecture: x86_64 with TEST commands"
        source $HOME/.cargo/env
        make clean
        make all TEST=1
    
    # 压缩build目录（标准版本）
    - name: Compress build directory (standard)
      run: |
        cd build
        zip -r ../build_x86_64.zip .
        cd ..
        ls -la build_x86_64.zip
    
    # 压缩build目录（测试版本）
    - name: Compress build directory (test version)
      run: |
        cd build
        zip -r ../build_x86_64_test.zip .
        cd ..
        ls -la build_x86_64_test.zip
    
    # 上传构建产物（标准版本）
    - name: Upload build artifacts (standard)
      uses: actions/upload-artifact@v4
      with:
        name: boruix-build-x86_64
        path: build_x86_64.zip
        retention-days: 30
    
    # 上传构建产物（测试版本）
    - name: Upload build artifacts (test)
      uses: actions/upload-artifact@v4
      with:
        name: boruix-build-x86_64-test
        path: build_x86_64_test.zip
        retention-days: 30
    
    # 上传ISO文件（标准版本）
    - name: Upload ISO files (standard)
      uses: actions/upload-artifact@v4
      with:
        name: boruix-iso-x86_64
        path: build/x86_64/*.iso
        retention-days: 30
      continue-on-error: true
    
    # 上传ISO文件（测试版本）
    - name: Upload ISO files (test)
      uses: actions/upload-artifact@v4
      with:
        name: boruix-iso-x86_64-test
        path: build/x86_64/*.iso
        retention-days: 30
      continue-on-error: true
    
    # 显示构建信息
    - name: Display build info
      run: |
        echo "=== Build Summary for x86_64 ==="
        echo "Architecture: x86_64"
        echo "Build directory contents:"
        ls -la build/x86_64/ || echo "No build directory found"
        echo "ISO files:"
        ls -la build/x86_64/*.iso || echo "No ISO files found"
        echo "Compressed build sizes:"
        ls -lh build_x86_64.zip || echo "No standard compressed file found"
        ls -lh build_x86_64_test.zip || echo "No test compressed file found"
        echo "Build completed successfully!"
        echo "Available artifacts:"
        echo "  - boruix-build-x86_64 (standard version)"
        echo "  - boruix-build-x86_64-test (with TEST commands)"
        echo "  - boruix-iso-x86_64 (standard ISO)"
        echo "  - boruix-iso-x86_64-test (test ISO)"